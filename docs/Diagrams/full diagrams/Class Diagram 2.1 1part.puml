@startuml
'https://plantuml.com/sequence-diagram

class Main {
    + main(String[]): void
    - stringInput(): String
    - numberInput(): int
    - numberInput(int, int): int
    - menuChoice(int): int
    - menu(): void
    - run(String[]): void
}

class Facade {
    + SpoolManager
    + PrintManager
    + PrinterManager
    - showPrinters(): void
    - showSpools(): void
    - showPrints(): void
    - showPendingPrintTasks(): void
    - startPrintQueue(): void
    - addNewPrintTask(): void
    - registerPrinterFailure(): void
    - registerPrintCompletion(): void
    - changePrintStrategy(): void
    - exit(): void
}

class PrintManager {
    + PrintManager()
    + addPrintTask(String, List<String>, FilamentType): void
    + findPrint(String): Print
    + addPrint(String, int, int, int, ArrayList<Double>, int): void
    - readPrintsFromFile(String): void
    + prints: List<Print>
}

class SpoolManager {
    + SpoolManager()
    + addSpool(Spool): void
    + getSpoolByID(int): Spool
    + {static} readSpoolsFromFile(String): void
    + spools: List<Spool>
}

class PrinterManager {
    + PrinterManager()
    + addPrinter(int, int, String, String, int, int, int, int): void
    + findPrinter(int): Printer
    + getPrinterCurrentTask(Printer): PrintTask
    + getPendingPrintTasks: List<PrintTask>
    + getPrinters: List<Printer
    + selectPrintTask(Printer): void
    + registerCompletion(int): void
    + registerPrinterFailure(int): void
    + startInitialQueue(): void
    - printError(String): void
    - readPrintersFromFile(String): void
    - Map<Printer, ArrayList<PrintTask>> printers
}

abstract class Printer{
      + containsSpool(List<Spool>, String) : boolean
}

class Print{
- String name
- int height
- int width
- int lenght
- double filamentLenght
- int printTime
---
+ Print()
+ getName(): String
+ getLenght(): double
+ getHeight(): int
+ getWidth(): int
+ getFilamentLenght(): int
}

class PrintTask{
- Print print
- List<String> colors
- FilamentType filamentType
+ List<String> getColors()
+ FilamentType getFilamentType()
+ Print getPrint()
}

class Spool{
    + Spool()
    - id: int
    - filamentType: FilamentType
    - color : String
    - length : double
    + getID(): int
    + spoolMatch(): boolean
    + reduceLength(): boolean
    + toString(): String
}

enum FilamentType{
  + FilamentType()
  + valueOf(String): FilamentType
  + values(): FilamentType[]
}

class StandardFDM{}
class MultiColor{}


Main -down-> Facade

Facade -down-> SpoolManager
SpoolManager -down-> Spool
Spool <-- FilamentType
Spool --* Printer

Facade -down-> PrintManager
PrintManager -down-> Print
Print -down-> PrintTask
PrintTask *-- PrinterManager

Facade -down-> PrinterManager
PrinterManager -down-> Printer
Printer <|-- StandardFDM
Printer <|-- MultiColor




@enduml