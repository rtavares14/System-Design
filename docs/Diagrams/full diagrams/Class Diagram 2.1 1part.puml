@startuml
'https://plantuml.com/sequence-diagram

class Main {
    + main(String[]): void
    - run(String[]): void
    - menu(): void
}

class Facade {
    + SpoolManager
    + PrintManager
    + PrinterManager
    - showPrinters(): void
    - showSpools(): void
    - showPrints(): void
    - showPendingPrintTasks(): void
    - startPrintQueue(): void
    - addNewPrintTask(): void
    - registerPrinterFailure(): void
    - registerPrintCompletion(): void
    - changePrintStrategy(): void
    - exit(): void
}

class PrintManager {
    + PrintManager()
    + addPrintTask(String, List<String>, FilamentType): void
    + findPrint(String): Print
    + addPrint(String, int, int, int, ArrayList<Double>, int): void
    - readPrintsFromFile(String): void
    + prints: List<Print>
}

class SpoolManager {
    + SpoolManager()
    + addSpool(Spool): void
    + getSpoolByID(int): Spool
    + {static} readSpoolsFromFile(String): void
    + spools: List<Spool>
}

class PrinterManager {
       - Map<Printer , ArrayList<PrintTask>> printers
       - PrinterFactory printerFactory
       - PrinterObserver
       + addObservers():void
       + PrinterManager()
       + selectPrintTask(Printer) : void
       + registerPrinterFailure(int) : void
       + addPrinter(int, int, String, String, int, int, int, int,) : void
       + getPrinterCurrentTask(Printer) : PrintTask
       + printError(String) : void
       + registerCompletion(int) : void
     + startInitialQueue() : void
     + findPrinter(int) : Printer
     + getPendingPrintTasks() : List<PrintTask>
     + getPrinters() : List<Printer>
 + registerObserver(observer: PrinterObserver): void
    + notifyObservers(): void
    + changeStatus(status: String): void
     + {static}readPrintersFromFile(String): void
}

abstract class Printer{
- int id
- String name
- String manufacturer
- int maxX;
- int maxY;
- int maxZ;
# ArrayList<Spool> spools;
+ Printer()
+ getID()
+ getName()
+ getManufacturer()
+ {abstract} setCurrentSpools(): void
+ {abstract} getCurrentSpools(): Spool[]
+ printFits()
+ containsSpool(List<Spool>, String) : boolean
}
class StandardFDM{
+ StandardFDM()
+ setCurrentSpools(): void
+ getCurrentSpools(): Spool[]
+ calculatePrintTime(): int
}
class MultiColor{
+ MultiColor()
+ setCurrentSpools(): void
+ getCurrentSpools(): Spool[]
+ calculatePrintTime(): int
}

interface PrintTimeCalculatorStrategy{
 + calculatePrintTime(): int
}

class PrinterRecord {
  - int id
  - String name
  - String manufacturer
  - int maxX
  - int maxY
  - int maxZ
  --
  <<Record>>
}

class SpoolRecord {
  - String materialType
  - int length
  - double diameter
  --
  <<Record>>
}

class PrintRecord {
  - String fileName
  - int xSize
  - int ySize
  - int zSize
  - Spool spool
  --
  <<Record>>
}

PrinterManager -up-> PrinterRecord
SpoolManager -up-> SpoolRecord
PrintManager -up-> PrintRecord

class Print{
- String name
- int height
- int width
- int lenght
- double filamentLenght
- int printTime
---
+ Print()
+ getName(): String
+ getLenght(): double
+ getHeight(): int
+ getWidth(): int
+ getFilamentLenght(): int
}

class PrintTask{
- Print print
- List<String> colors
- FilamentType filamentType
+ List<String> getColors()
+ FilamentType getFilamentType()
+ Print getPrint()
}

class Spool{
    + Spool()
    - id: int
    - filamentType: FilamentType
    - color : String
    - length : double
    + getID(): int
    + spoolMatch(): boolean
    + reduceLength(): boolean
    + toString(): String
}

enum FilamentType{
  + FilamentType()
  + valueOf(String): FilamentType
  + values(): FilamentType[]
}

class PrinterFactory {
    + createPrinter(id, String, manufacturerString, int, int, int, ArrayList<Spool>): Printer
}
interface PrinterObserver{
+ update(Printer,String): void
}

PrinterManager --> PrinterFactory
PrinterFactory --> Printer
PrinterObserver --> Facade
PrinterObserver --> PrinterManager

Main -down-> Facade

Facade -down-> SpoolManager
SpoolManager -down-> Spool
Spool <-- FilamentType
Spool --* Printer

Facade -down-> PrintManager
PrintManager -down-> Print
Print -down-> PrintTask
PrintTask *-- PrinterManager

Facade -down-> PrinterManager
PrinterManager -down-> Printer
Printer <|-- StandardFDM
Printer <|-- MultiColor
StandardFDM <.. PrintTimeCalculatorStrategy
MultiColor <.. PrintTimeCalculatorStrategy



@enduml